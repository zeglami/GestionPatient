package com.springmvc.training.security;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration //trait√© au niveau de la demarrage de l'application
public class SecurityConfig extends WebSecurityConfigurerAdapter {
	
	@Autowired
	private DataSource dataSource;
	
	@Override
	protected void configure(AuthenticationManagerBuilder auth) throws Exception {
		PasswordEncoder passwordEncoder=passwordEncoder();
		
		
		
		System.out.println("======================================");
		System.out.println(passwordEncoder.encode("12345"));
		String temp=passwordEncoder.encode("12345").toString();
		System.out.println(temp);
		System.out.println("======================================");
		
		//auth.inMemoryAuthentication().withUser("user1").password("{noop}12345").roles("USER");
		//auth.inMemoryAuthentication().withUser("user2").password(temp).roles("USER");
		////bcrypt spring security online
		//auth.inMemoryAuthentication().withUser("admin").password(temp).roles("USER","ADMIN");
		auth.jdbcAuthentication()
		.dataSource(dataSource)
		.usersByUsernameQuery("SELECT username as principal,password as credentials,active from users where username=?")
		.authoritiesByUsernameQuery("select username as principal,role as role from users_roles where username=?")
		.passwordEncoder(passwordEncoder)
		.rolePrefix("ROLE_");
		
		

	}
	
	@Override
	protected void configure(HttpSecurity http) throws Exception {


		//http.formLogin();//login for de spring security par defaut
		http.formLogin().loginPage("/login");
		//http.httpBasic();
		//http.authorizeRequests().anyRequest().authenticated();//Any athenticated user
		http.authorizeRequests().antMatchers("/save**/**","/delete**/**","/form**/**").hasRole("ADMIN");
		http.authorizeRequests().antMatchers("/patients**/**").hasRole("USER");
		http.authorizeRequests().antMatchers("/**user/**","/connect/**","webjars/**").permitAll();
		//http.authorizeRequests().anyRequest().authenticated();
		http.exceptionHandling().accessDeniedPage("/notAutorized");
		//L'ordre est tres important
		
		
		/*
		 * A CSRF token is a unique, secret, unpredictable value that is generated by the server-side 
		 * application and transmitted to the client in such a way that it is included in a subsequent 
		 * HTTP request made by the client. When the later request is made, the server-side application 
		 * validates that the request includes the expected token and rejects the request if the token 
		 * is missing or invalid.
		 */
		//http.csrf().disable(); // it's activated by default, we disable it when we work with rest api stateless 
		
		
	}
	
	@Bean
	public PasswordEncoder passwordEncoder(){
		return new BCryptPasswordEncoder();
	}

}
